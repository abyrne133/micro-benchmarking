Alans-MBP:benchmarking alanbyrne$ java -ea -Xms512m -Xmx5000m -jar target/benchmarks.jar
# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each, 10000 calls per op
# Measurement: 10 iterations, 10 s each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = default-constructor)

# Run progress: 0.00% complete, ETA 00:55:00
# Fork: 1 of 2
# Warmup Iteration   1: 3.545 ms/op
# Warmup Iteration   2: 3.773 ms/op
# Warmup Iteration   3: 3.862 ms/op
# Warmup Iteration   4: 3.852 ms/op
# Warmup Iteration   5: 3.937 ms/op
Iteration   1: 3.887 ms/op
Iteration   2: 3.695 ms/op
Iteration   3: 3.706 ms/op
Iteration   4: 3.722 ms/op
Iteration   5: 3.772 ms/op
Iteration   6: 3.733 ms/op
Iteration   7: 3.622 ms/op
Iteration   8: 3.750 ms/op
Iteration   9: 3.480 ms/op
Iteration  10: 3.965 ms/op

# Run progress: 4.55% complete, ETA 00:56:44
# Fork: 2 of 2
# Warmup Iteration   1: 3.541 ms/op
# Warmup Iteration   2: 3.800 ms/op
# Warmup Iteration   3: 3.850 ms/op
# Warmup Iteration   4: 3.496 ms/op
# Warmup Iteration   5: 3.744 ms/op
Iteration   1: 3.775 ms/op
Iteration   2: 3.821 ms/op
Iteration   3: 3.719 ms/op
Iteration   4: 3.657 ms/op
Iteration   5: 3.726 ms/op
Iteration   6: 3.724 ms/op
Iteration   7: 3.601 ms/op
Iteration   8: 3.708 ms/op
Iteration   9: 3.828 ms/op
Iteration  10: 3.844 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  3.737 ±(99.9%) 0.092 ms/op [Average]
  (min, avg, max) = (3.480, 3.737, 3.965), stdev = 0.106
  CI (99.9%): [3.645, 3.829] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each, 10000 calls per op
# Measurement: 10 iterations, 10 s each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = control)

# Run progress: 9.09% complete, ETA 00:53:45
# Fork: 1 of 2
# Warmup Iteration   1: 3.516 ms/op
# Warmup Iteration   2: 3.775 ms/op
# Warmup Iteration   3: 3.850 ms/op
# Warmup Iteration   4: 3.731 ms/op
# Warmup Iteration   5: 3.723 ms/op
Iteration   1: 3.671 ms/op
Iteration   2: 3.623 ms/op
Iteration   3: 3.771 ms/op
Iteration   4: 3.765 ms/op
Iteration   5: 3.862 ms/op
Iteration   6: 3.856 ms/op
Iteration   7: 3.838 ms/op
Iteration   8: 3.748 ms/op
Iteration   9: 3.745 ms/op
Iteration  10: 3.858 ms/op

# Run progress: 13.64% complete, ETA 00:51:07
# Fork: 2 of 2
# Warmup Iteration   1: 3.520 ms/op
# Warmup Iteration   2: 3.893 ms/op
# Warmup Iteration   3: 3.685 ms/op
# Warmup Iteration   4: 3.481 ms/op
# Warmup Iteration   5: 3.767 ms/op
Iteration   1: 3.744 ms/op
Iteration   2: 3.762 ms/op
Iteration   3: 3.465 ms/op
Iteration   4: 3.693 ms/op
Iteration   5: 3.666 ms/op
Iteration   6: 3.549 ms/op
Iteration   7: 3.794 ms/op
Iteration   8: 3.787 ms/op
Iteration   9: 3.907 ms/op
Iteration  10: 3.845 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  3.747 ±(99.9%) 0.097 ms/op [Average]
  (min, avg, max) = (3.465, 3.747, 3.907), stdev = 0.111
  CI (99.9%): [3.651, 3.844] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each, 10000 calls per op
# Measurement: 10 iterations, 10 s each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = capacity)

# Run progress: 18.18% complete, ETA 00:48:16
# Fork: 1 of 2
# Warmup Iteration   1: 3.615 ms/op
# Warmup Iteration   2: 3.904 ms/op
# Warmup Iteration   3: 3.811 ms/op
# Warmup Iteration   4: 3.601 ms/op
# Warmup Iteration   5: 3.613 ms/op
Iteration   1: 3.854 ms/op
Iteration   2: 3.510 ms/op
Iteration   3: 3.774 ms/op
Iteration   4: 3.659 ms/op
Iteration   5: 3.723 ms/op
Iteration   6: 3.859 ms/op
Iteration   7: 3.825 ms/op
Iteration   8: 3.807 ms/op
Iteration   9: 3.484 ms/op
Iteration  10: 3.789 ms/op

# Run progress: 22.73% complete, ETA 00:45:31
# Fork: 2 of 2
# Warmup Iteration   1: 3.569 ms/op
# Warmup Iteration   2: 3.749 ms/op
# Warmup Iteration   3: 3.886 ms/op
# Warmup Iteration   4: 3.838 ms/op
# Warmup Iteration   5: 3.742 ms/op
Iteration   1: 3.735 ms/op
Iteration   2: 3.665 ms/op
Iteration   3: 3.660 ms/op
Iteration   4: 3.745 ms/op
Iteration   5: 3.637 ms/op
Iteration   6: 3.715 ms/op
Iteration   7: 3.773 ms/op
Iteration   8: 3.480 ms/op
Iteration   9: 3.765 ms/op
Iteration  10: 3.808 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  3.713 ±(99.9%) 0.100 ms/op [Average]
  (min, avg, max) = (3.480, 3.713, 3.859), stdev = 0.115
  CI (99.9%): [3.614, 3.813] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each, 10000 calls per op
# Measurement: 10 iterations, 10 s each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = half-capacity)

# Run progress: 27.27% complete, ETA 00:42:49
# Fork: 1 of 2
# Warmup Iteration   1: 3.528 ms/op
# Warmup Iteration   2: 3.773 ms/op
# Warmup Iteration   3: 3.834 ms/op
# Warmup Iteration   4: 3.825 ms/op
# Warmup Iteration   5: 3.776 ms/op
Iteration   1: 3.739 ms/op
Iteration   2: 3.723 ms/op
Iteration   3: 3.627 ms/op
Iteration   4: 3.832 ms/op
Iteration   5: 3.899 ms/op
Iteration   6: 3.840 ms/op
Iteration   7: 3.827 ms/op
Iteration   8: 3.753 ms/op
Iteration   9: 3.943 ms/op
Iteration  10: 3.933 ms/op

# Run progress: 31.82% complete, ETA 00:40:13
# Fork: 2 of 2
# Warmup Iteration   1: 3.516 ms/op
# Warmup Iteration   2: 3.771 ms/op
# Warmup Iteration   3: 3.841 ms/op
# Warmup Iteration   4: 3.842 ms/op
# Warmup Iteration   5: 3.769 ms/op
Iteration   1: 3.806 ms/op
Iteration   2: 3.766 ms/op
Iteration   3: 3.813 ms/op
Iteration   4: 3.763 ms/op
Iteration   5: 3.585 ms/op
Iteration   6: 3.543 ms/op
Iteration   7: 3.778 ms/op
Iteration   8: 3.686 ms/op
Iteration   9: 3.785 ms/op
Iteration  10: 3.894 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  3.777 ±(99.9%) 0.093 ms/op [Average]
  (min, avg, max) = (3.543, 3.777, 3.943), stdev = 0.107
  CI (99.9%): [3.683, 3.870] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each, 10000 calls per op
# Measurement: 10 iterations, 10 s each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = capacity-no-load-factor)

# Run progress: 36.36% complete, ETA 00:37:33
# Fork: 1 of 2
# Warmup Iteration   1: 3.792 ms/op
# Warmup Iteration   2: 3.832 ms/op
# Warmup Iteration   3: 3.585 ms/op
# Warmup Iteration   4: 3.581 ms/op
# Warmup Iteration   5: 3.565 ms/op
Iteration   1: 3.811 ms/op
Iteration   2: 3.744 ms/op
Iteration   3: 3.515 ms/op
Iteration   4: 3.786 ms/op
Iteration   5: 3.753 ms/op
Iteration   6: 3.629 ms/op
Iteration   7: 3.571 ms/op
Iteration   8: 3.495 ms/op
Iteration   9: 3.619 ms/op
Iteration  10: 3.654 ms/op

# Run progress: 40.91% complete, ETA 00:34:37
# Fork: 2 of 2
# Warmup Iteration   1: 3.831 ms/op
# Warmup Iteration   2: 3.761 ms/op
# Warmup Iteration   3: 3.641 ms/op
# Warmup Iteration   4: 3.741 ms/op
# Warmup Iteration   5: 3.663 ms/op
Iteration   1: 3.496 ms/op
Iteration   2: 3.543 ms/op
Iteration   3: 3.463 ms/op
Iteration   4: 3.627 ms/op
Iteration   5: 3.512 ms/op
Iteration   6: 3.590 ms/op
Iteration   7: 3.455 ms/op
Iteration   8: 3.765 ms/op
Iteration   9: 3.611 ms/op
Iteration  10: 3.589 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  3.611 ±(99.9%) 0.096 ms/op [Average]
  (min, avg, max) = (3.455, 3.611, 3.811), stdev = 0.111
  CI (99.9%): [3.515, 3.708] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each, 10000 calls per op
# Measurement: 10 iterations, 10 s each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = custom-default)

# Run progress: 45.45% complete, ETA 00:31:48
# Fork: 1 of 2
# Warmup Iteration   1: 3.617 ms/op
# Warmup Iteration   2: 3.765 ms/op
# Warmup Iteration   3: 3.594 ms/op
# Warmup Iteration   4: 3.725 ms/op
# Warmup Iteration   5: 3.607 ms/op
Iteration   1: 3.727 ms/op
Iteration   2: 3.703 ms/op
Iteration   3: 3.521 ms/op
Iteration   4: 3.550 ms/op
Iteration   5: 3.605 ms/op
Iteration   6: 3.680 ms/op
Iteration   7: 3.792 ms/op
Iteration   8: 3.581 ms/op
Iteration   9: 3.644 ms/op
Iteration  10: 3.522 ms/op

# Run progress: 50.00% complete, ETA 00:29:01
# Fork: 2 of 2
# Warmup Iteration   1: 3.621 ms/op
# Warmup Iteration   2: 3.784 ms/op
# Warmup Iteration   3: 3.529 ms/op
# Warmup Iteration   4: 3.634 ms/op
# Warmup Iteration   5: 3.622 ms/op
Iteration   1: 3.760 ms/op
Iteration   2: 3.822 ms/op
Iteration   3: 3.739 ms/op
Iteration   4: 3.518 ms/op
Iteration   5: 3.511 ms/op
Iteration   6: 3.663 ms/op
Iteration   7: 3.636 ms/op
Iteration   8: 3.644 ms/op
Iteration   9: 3.544 ms/op
Iteration  10: 3.568 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  3.636 ±(99.9%) 0.085 ms/op [Average]
  (min, avg, max) = (3.511, 3.636, 3.822), stdev = 0.097
  CI (99.9%): [3.552, 3.721] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each, 10000 calls per op
# Measurement: 10 iterations, 10 s each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = custom-capacity)

# Run progress: 54.54% complete, ETA 00:26:17
# Fork: 1 of 2
# Warmup Iteration   1: 3.774 ms/op
# Warmup Iteration   2: 3.822 ms/op
# Warmup Iteration   3: 3.688 ms/op
# Warmup Iteration   4: 3.940 ms/op
# Warmup Iteration   5: 3.763 ms/op
Iteration   1: 4.196 ms/op
Iteration   2: 3.964 ms/op
Iteration   3: 3.860 ms/op
Iteration   4: 3.830 ms/op
Iteration   5: 3.792 ms/op
Iteration   6: 3.582 ms/op
Iteration   7: 4.119 ms/op
Iteration   8: 4.001 ms/op
Iteration   9: 3.771 ms/op
Iteration  10: 3.796 ms/op

# Run progress: 59.09% complete, ETA 00:23:35
# Fork: 2 of 2
# Warmup Iteration   1: 3.733 ms/op
# Warmup Iteration   2: 3.805 ms/op
# Warmup Iteration   3: 3.679 ms/op
# Warmup Iteration   4: 3.908 ms/op
# Warmup Iteration   5: 3.761 ms/op
Iteration   1: 3.838 ms/op
Iteration   2: 3.854 ms/op
Iteration   3: 3.755 ms/op
Iteration   4: 3.853 ms/op
Iteration   5: 4.122 ms/op
Iteration   6: 3.775 ms/op
Iteration   7: 3.773 ms/op
Iteration   8: 3.864 ms/op
Iteration   9: 4.080 ms/op
Iteration  10: 3.796 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  3.881 ±(99.9%) 0.133 ms/op [Average]
  (min, avg, max) = (3.582, 3.881, 4.196), stdev = 0.153
  CI (99.9%): [3.748, 4.014] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each, 10000 calls per op
# Measurement: 10 iterations, 10 s each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = custom-terrible-hash)

# Run progress: 63.63% complete, ETA 00:20:54
# Fork: 1 of 2
# Warmup Iteration   1: 1284.748 ms/op
# Warmup Iteration   2: 1370.310 ms/op
# Warmup Iteration   3: 1286.650 ms/op
# Warmup Iteration   4: 1291.754 ms/op
# Warmup Iteration   5: 1280.864 ms/op
Iteration   1: 1287.638 ms/op
Iteration   2: 1291.523 ms/op
Iteration   3: 1286.610 ms/op
Iteration   4: 1279.168 ms/op
Iteration   5: 1280.834 ms/op
Iteration   6: 1290.716 ms/op
Iteration   7: 1281.284 ms/op
Iteration   8: 1294.861 ms/op
Iteration   9: 1286.086 ms/op
Iteration  10: 1290.474 ms/op

# Run progress: 68.18% complete, ETA 00:18:15
# Fork: 2 of 2
# Warmup Iteration   1: 1279.127 ms/op
# Warmup Iteration   2: 1368.753 ms/op
# Warmup Iteration   3: 1296.644 ms/op
# Warmup Iteration   4: 1303.813 ms/op
# Warmup Iteration   5: 1284.050 ms/op
Iteration   1: 1298.452 ms/op
Iteration   2: 1447.367 ms/op
Iteration   3: 1290.896 ms/op
Iteration   4: 1286.528 ms/op
Iteration   5: 1287.741 ms/op
Iteration   6: 1302.626 ms/op
Iteration   7: 1309.978 ms/op
Iteration   8: 1299.094 ms/op
Iteration   9: 1290.715 ms/op
Iteration  10: 1310.643 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  1299.662 ±(99.9%) 31.113 ms/op [Average]
  (min, avg, max) = (1279.168, 1299.662, 1447.367), stdev = 35.829
  CI (99.9%): [1268.549, 1330.774] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each, 10000 calls per op
# Measurement: 10 iterations, 10 s each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = custom-bad-hash)

# Run progress: 72.72% complete, ETA 00:15:36
# Fork: 1 of 2
# Warmup Iteration   1: 742.651 ms/op
# Warmup Iteration   2: 705.122 ms/op
# Warmup Iteration   3: 653.182 ms/op
# Warmup Iteration   4: 738.856 ms/op
# Warmup Iteration   5: 691.621 ms/op
Iteration   1: 742.987 ms/op
Iteration   2: 741.642 ms/op
Iteration   3: 676.206 ms/op
Iteration   4: 739.694 ms/op
Iteration   5: 721.211 ms/op
Iteration   6: 710.275 ms/op
Iteration   7: 739.764 ms/op
Iteration   8: 722.136 ms/op
Iteration   9: 722.609 ms/op
Iteration  10: 719.135 ms/op

# Run progress: 77.27% complete, ETA 00:12:58
# Fork: 2 of 2
# Warmup Iteration   1: 723.451 ms/op
# Warmup Iteration   2: 692.504 ms/op
# Warmup Iteration   3: 669.292 ms/op
# Warmup Iteration   4: 732.451 ms/op
# Warmup Iteration   5: 706.346 ms/op
Iteration   1: 734.756 ms/op
Iteration   2: 717.742 ms/op
Iteration   3: 717.473 ms/op
Iteration   4: 743.860 ms/op
Iteration   5: 669.388 ms/op
Iteration   6: 731.130 ms/op
Iteration   7: 729.186 ms/op
Iteration   8: 750.330 ms/op
Iteration   9: 719.237 ms/op
Iteration  10: 677.636 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  721.320 ±(99.9%) 19.971 ms/op [Average]
  (min, avg, max) = (669.388, 721.320, 750.330), stdev = 22.999
  CI (99.9%): [701.349, 741.291] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each, 10000 calls per op
# Measurement: 10 iterations, 10 s each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = custom-basic-hash)

# Run progress: 81.81% complete, ETA 00:10:21
# Fork: 1 of 2
# Warmup Iteration   1: 3.564 ms/op
# Warmup Iteration   2: 3.736 ms/op
# Warmup Iteration   3: 3.702 ms/op
# Warmup Iteration   4: 3.600 ms/op
# Warmup Iteration   5: 3.659 ms/op
Iteration   1: 3.672 ms/op
Iteration   2: 3.636 ms/op
Iteration   3: 3.855 ms/op
Iteration   4: 3.638 ms/op
Iteration   5: 3.731 ms/op
Iteration   6: 3.585 ms/op
Iteration   7: 3.670 ms/op
Iteration   8: 3.706 ms/op
Iteration   9: 3.548 ms/op
Iteration  10: 3.673 ms/op

# Run progress: 86.36% complete, ETA 00:07:45
# Fork: 2 of 2
# Warmup Iteration   1: 3.575 ms/op
# Warmup Iteration   2: 3.754 ms/op
# Warmup Iteration   3: 3.617 ms/op
# Warmup Iteration   4: 3.601 ms/op
# Warmup Iteration   5: 3.627 ms/op
Iteration   1: 3.622 ms/op
Iteration   2: 3.619 ms/op
Iteration   3: 3.546 ms/op
Iteration   4: 3.600 ms/op
Iteration   5: 3.609 ms/op
Iteration   6: 3.686 ms/op
Iteration   7: 3.479 ms/op
Iteration   8: 3.680 ms/op
Iteration   9: 3.650 ms/op
Iteration  10: 3.638 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  3.642 ±(99.9%) 0.068 ms/op [Average]
  (min, avg, max) = (3.479, 3.642, 3.855), stdev = 0.078
  CI (99.9%): [3.575, 3.710] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 10 s each, 10000 calls per op
# Measurement: 10 iterations, 10 s each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = custom-hash-no-modulo)

# Run progress: 90.90% complete, ETA 00:05:10
# Fork: 1 of 2
# Warmup Iteration   1: 3.564 ms/op
# Warmup Iteration   2: 3.741 ms/op
# Warmup Iteration   3: 3.667 ms/op
# Warmup Iteration   4: 3.552 ms/op
# Warmup Iteration   5: 3.624 ms/op
Iteration   1: 3.674 ms/op
Iteration   2: 3.682 ms/op
Iteration   3: 3.630 ms/op
Iteration   4: 3.469 ms/op
Iteration   5: 3.543 ms/op
Iteration   6: 3.529 ms/op
Iteration   7: 3.720 ms/op
Iteration   8: 3.645 ms/op
Iteration   9: 3.653 ms/op
Iteration  10: 3.558 ms/op

# Run progress: 95.45% complete, ETA 00:02:35
# Fork: 2 of 2
# Warmup Iteration   1: 3.534 ms/op
# Warmup Iteration   2: 3.732 ms/op
# Warmup Iteration   3: 3.566 ms/op
# Warmup Iteration   4: 3.503 ms/op
# Warmup Iteration   5: 3.589 ms/op
Iteration   1: 3.608 ms/op
Iteration   2: 3.490 ms/op
Iteration   3: 3.619 ms/op
Iteration   4: 3.662 ms/op
Iteration   5: 3.495 ms/op
Iteration   6: 3.513 ms/op
Iteration   7: 3.683 ms/op
Iteration   8: 3.629 ms/op
Iteration   9: 3.764 ms/op
Iteration  10: 3.659 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  3.611 ±(99.9%) 0.072 ms/op [Average]
  (min, avg, max) = (3.469, 3.611, 3.764), stdev = 0.083
  CI (99.9%): [3.539, 3.683] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, single-shot each, 10000 calls per op
# Measurement: 10 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = default-constructor)

# Run progress: 99.99% complete, ETA 00:00:00
# Fork: 1 of 2
# Warmup Iteration   1: 2.828 ms/op
# Warmup Iteration   2: 1.741 ms/op
# Warmup Iteration   3: 1.641 ms/op
# Warmup Iteration   4: 1.321 ms/op
# Warmup Iteration   5: 1.276 ms/op
Iteration   1: 1.362 ms/op
Iteration   2: 1.655 ms/op
Iteration   3: 1.726 ms/op
Iteration   4: 1.187 ms/op
Iteration   5: 1.147 ms/op
Iteration   6: 1.157 ms/op
Iteration   7: 1.035 ms/op
Iteration   8: 1.046 ms/op
Iteration   9: 1.036 ms/op
Iteration  10: 1.004 ms/op

# Run progress: 99.99% complete, ETA 00:00:00
# Fork: 2 of 2
# Warmup Iteration   1: 2.845 ms/op
# Warmup Iteration   2: 1.795 ms/op
# Warmup Iteration   3: 1.421 ms/op
# Warmup Iteration   4: 1.282 ms/op
# Warmup Iteration   5: 1.286 ms/op
Iteration   1: 1.268 ms/op
Iteration   2: 1.627 ms/op
Iteration   3: 1.222 ms/op
Iteration   4: 1.718 ms/op
Iteration   5: 1.224 ms/op
Iteration   6: 1.175 ms/op
Iteration   7: 1.110 ms/op
Iteration   8: 1.003 ms/op
Iteration   9: 1.099 ms/op
Iteration  10: 1.189 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  N = 20
  mean =      1.249 ±(99.9%) 0.209 ms/op

  Histogram, ms/op:
    [1.000, 1.050) = 5
    [1.050, 1.100) = 1
    [1.100, 1.150) = 2
    [1.150, 1.200) = 4
    [1.200, 1.250) = 2
    [1.250, 1.300) = 1
    [1.300, 1.350) = 0
    [1.350, 1.400) = 1
    [1.400, 1.450) = 0
    [1.450, 1.500) = 0
    [1.500, 1.550) = 0
    [1.550, 1.600) = 0
    [1.600, 1.650) = 1
    [1.650, 1.700) = 1
    [1.700, 1.750) = 2

  Percentiles, ms/op:
      p(0.0000) =      1.003 ms/op
     p(50.0000) =      1.181 ms/op
     p(90.0000) =      1.712 ms/op
     p(95.0000) =      1.726 ms/op
     p(99.0000) =      1.726 ms/op
     p(99.9000) =      1.726 ms/op
     p(99.9900) =      1.726 ms/op
     p(99.9990) =      1.726 ms/op
     p(99.9999) =      1.726 ms/op
    p(100.0000) =      1.726 ms/op


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, single-shot each, 10000 calls per op
# Measurement: 10 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = control)

# Run progress: 99.99% complete, ETA 00:00:00
# Fork: 1 of 2
# Warmup Iteration   1: 3.061 ms/op
# Warmup Iteration   2: 1.621 ms/op
# Warmup Iteration   3: 1.798 ms/op
# Warmup Iteration   4: 1.314 ms/op
# Warmup Iteration   5: 1.248 ms/op
Iteration   1: 1.446 ms/op
Iteration   2: 1.413 ms/op
Iteration   3: 1.247 ms/op
Iteration   4: 1.183 ms/op
Iteration   5: 1.191 ms/op
Iteration   6: 1.164 ms/op
Iteration   7: 1.036 ms/op
Iteration   8: 1.043 ms/op
Iteration   9: 1.025 ms/op
Iteration  10: 1.006 ms/op

# Run progress: 99.99% complete, ETA 00:00:00
# Fork: 2 of 2
# Warmup Iteration   1: 2.590 ms/op
# Warmup Iteration   2: 1.683 ms/op
# Warmup Iteration   3: 1.617 ms/op
# Warmup Iteration   4: 1.794 ms/op
# Warmup Iteration   5: 1.409 ms/op
Iteration   1: 1.420 ms/op
Iteration   2: 1.599 ms/op
Iteration   3: 1.276 ms/op
Iteration   4: 1.245 ms/op
Iteration   5: 1.239 ms/op
Iteration   6: 1.214 ms/op
Iteration   7: 1.477 ms/op
Iteration   8: 1.243 ms/op
Iteration   9: 1.071 ms/op
Iteration  10: 1.063 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  N = 20
  mean =      1.230 ±(99.9%) 0.147 ms/op

  Histogram, ms/op:
    [1.000, 1.050) = 4
    [1.050, 1.100) = 2
    [1.100, 1.150) = 0
    [1.150, 1.200) = 3
    [1.200, 1.250) = 5
    [1.250, 1.300) = 1
    [1.300, 1.350) = 0
    [1.350, 1.400) = 0
    [1.400, 1.450) = 3
    [1.450, 1.500) = 1
    [1.500, 1.550) = 0
    [1.550, 1.600) = 1

  Percentiles, ms/op:
      p(0.0000) =      1.006 ms/op
     p(50.0000) =      1.227 ms/op
     p(90.0000) =      1.474 ms/op
     p(95.0000) =      1.593 ms/op
     p(99.0000) =      1.599 ms/op
     p(99.9000) =      1.599 ms/op
     p(99.9900) =      1.599 ms/op
     p(99.9990) =      1.599 ms/op
     p(99.9999) =      1.599 ms/op
    p(100.0000) =      1.599 ms/op


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, single-shot each, 10000 calls per op
# Measurement: 10 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = capacity)

# Run progress: 99.99% complete, ETA 00:00:00
# Fork: 1 of 2
# Warmup Iteration   1: 1.840 ms/op
# Warmup Iteration   2: 1.297 ms/op
# Warmup Iteration   3: 1.052 ms/op
# Warmup Iteration   4: 0.940 ms/op
# Warmup Iteration   5: 1.117 ms/op
Iteration   1: 0.935 ms/op
Iteration   2: 1.028 ms/op
Iteration   3: 0.763 ms/op
Iteration   4: 0.773 ms/op
Iteration   5: 0.773 ms/op
Iteration   6: 0.807 ms/op
Iteration   7: 0.806 ms/op
Iteration   8: 0.758 ms/op
Iteration   9: 0.888 ms/op
Iteration  10: 0.823 ms/op

# Run progress: 99.99% complete, ETA 00:00:00
# Fork: 2 of 2
# Warmup Iteration   1: 1.872 ms/op
# Warmup Iteration   2: 1.324 ms/op
# Warmup Iteration   3: 0.985 ms/op
# Warmup Iteration   4: 0.965 ms/op
# Warmup Iteration   5: 1.030 ms/op
Iteration   1: 0.955 ms/op
Iteration   2: 1.077 ms/op
Iteration   3: 0.779 ms/op
Iteration   4: 0.822 ms/op
Iteration   5: 0.782 ms/op
Iteration   6: 0.767 ms/op
Iteration   7: 0.806 ms/op
Iteration   8: 0.748 ms/op
Iteration   9: 0.843 ms/op
Iteration  10: 0.798 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  N = 20
  mean =      0.837 ±(99.9%) 0.081 ms/op

  Histogram, ms/op:
    [0.700, 0.725) = 0
    [0.725, 0.750) = 1
    [0.750, 0.775) = 5
    [0.775, 0.800) = 3
    [0.800, 0.825) = 5
    [0.825, 0.850) = 1
    [0.850, 0.875) = 0
    [0.875, 0.900) = 1
    [0.900, 0.925) = 0
    [0.925, 0.950) = 1
    [0.950, 0.975) = 1
    [0.975, 1.000) = 0
    [1.000, 1.025) = 0
    [1.025, 1.050) = 1
    [1.050, 1.075) = 0

  Percentiles, ms/op:
      p(0.0000) =      0.748 ms/op
     p(50.0000) =      0.806 ms/op
     p(90.0000) =      1.020 ms/op
     p(95.0000) =      1.074 ms/op
     p(99.0000) =      1.077 ms/op
     p(99.9000) =      1.077 ms/op
     p(99.9900) =      1.077 ms/op
     p(99.9990) =      1.077 ms/op
     p(99.9999) =      1.077 ms/op
    p(100.0000) =      1.077 ms/op


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, single-shot each, 10000 calls per op
# Measurement: 10 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = half-capacity)

# Run progress: 99.99% complete, ETA 00:00:00
# Fork: 1 of 2
# Warmup Iteration   1: 2.628 ms/op
# Warmup Iteration   2: 1.640 ms/op
# Warmup Iteration   3: 1.831 ms/op
# Warmup Iteration   4: 1.322 ms/op
# Warmup Iteration   5: 1.365 ms/op
Iteration   1: 1.269 ms/op
Iteration   2: 1.361 ms/op
Iteration   3: 1.148 ms/op
Iteration   4: 1.088 ms/op
Iteration   5: 1.194 ms/op
Iteration   6: 1.168 ms/op
Iteration   7: 1.367 ms/op
Iteration   8: 1.035 ms/op
Iteration   9: 1.076 ms/op
Iteration  10: 0.983 ms/op

# Run progress: 99.99% complete, ETA 00:00:00
# Fork: 2 of 2
# Warmup Iteration   1: 2.475 ms/op
# Warmup Iteration   2: 1.703 ms/op
# Warmup Iteration   3: 1.335 ms/op
# Warmup Iteration   4: 1.277 ms/op
# Warmup Iteration   5: 1.268 ms/op
Iteration   1: 1.249 ms/op
Iteration   2: 1.433 ms/op
Iteration   3: 1.136 ms/op
Iteration   4: 1.088 ms/op
Iteration   5: 1.166 ms/op
Iteration   6: 1.140 ms/op
Iteration   7: 1.272 ms/op
Iteration   8: 1.144 ms/op
Iteration   9: 0.958 ms/op
Iteration  10: 1.304 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  N = 20
  mean =      1.179 ±(99.9%) 0.111 ms/op

  Histogram, ms/op:
    [0.900, 0.950) = 0
    [0.950, 1.000) = 2
    [1.000, 1.050) = 1
    [1.050, 1.100) = 3
    [1.100, 1.150) = 4
    [1.150, 1.200) = 3
    [1.200, 1.250) = 1
    [1.250, 1.300) = 2
    [1.300, 1.350) = 1
    [1.350, 1.400) = 2
    [1.400, 1.450) = 1

  Percentiles, ms/op:
      p(0.0000) =      0.958 ms/op
     p(50.0000) =      1.157 ms/op
     p(90.0000) =      1.366 ms/op
     p(95.0000) =      1.430 ms/op
     p(99.0000) =      1.433 ms/op
     p(99.9000) =      1.433 ms/op
     p(99.9900) =      1.433 ms/op
     p(99.9990) =      1.433 ms/op
     p(99.9999) =      1.433 ms/op
    p(100.0000) =      1.433 ms/op


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, single-shot each, 10000 calls per op
# Measurement: 10 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = capacity-no-load-factor)

# Run progress: 99.99% complete, ETA 00:00:00
# Fork: 1 of 2
# Warmup Iteration   1: 1.953 ms/op
# Warmup Iteration   2: 1.381 ms/op
# Warmup Iteration   3: 1.225 ms/op
# Warmup Iteration   4: 1.020 ms/op
# Warmup Iteration   5: 0.921 ms/op
Iteration   1: 1.101 ms/op
Iteration   2: 1.012 ms/op
Iteration   3: 0.829 ms/op
Iteration   4: 0.751 ms/op
Iteration   5: 0.810 ms/op
Iteration   6: 0.776 ms/op
Iteration   7: 0.765 ms/op
Iteration   8: 0.743 ms/op
Iteration   9: 0.864 ms/op
Iteration  10: 0.820 ms/op

# Run progress: 99.99% complete, ETA 00:00:00
# Fork: 2 of 2
# Warmup Iteration   1: 1.848 ms/op
# Warmup Iteration   2: 1.340 ms/op
# Warmup Iteration   3: 1.295 ms/op
# Warmup Iteration   4: 1.118 ms/op
# Warmup Iteration   5: 0.922 ms/op
Iteration   1: 0.909 ms/op
Iteration   2: 1.270 ms/op
Iteration   3: 0.891 ms/op
Iteration   4: 0.748 ms/op
Iteration   5: 0.743 ms/op
Iteration   6: 0.776 ms/op
Iteration   7: 0.746 ms/op
Iteration   8: 0.749 ms/op
Iteration   9: 0.769 ms/op
Iteration  10: 0.835 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  N = 20
  mean =      0.845 ±(99.9%) 0.120 ms/op

  Histogram, ms/op:
    [0.700, 0.750) = 5
    [0.750, 0.800) = 5
    [0.800, 0.850) = 4
    [0.850, 0.900) = 2
    [0.900, 0.950) = 1
    [0.950, 1.000) = 0
    [1.000, 1.050) = 1
    [1.050, 1.100) = 0
    [1.100, 1.150) = 1
    [1.150, 1.200) = 0
    [1.200, 1.250) = 0

  Percentiles, ms/op:
      p(0.0000) =      0.743 ms/op
     p(50.0000) =      0.793 ms/op
     p(90.0000) =      1.092 ms/op
     p(95.0000) =      1.262 ms/op
     p(99.0000) =      1.270 ms/op
     p(99.9000) =      1.270 ms/op
     p(99.9900) =      1.270 ms/op
     p(99.9990) =      1.270 ms/op
     p(99.9999) =      1.270 ms/op
    p(100.0000) =      1.270 ms/op


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, single-shot each, 10000 calls per op
# Measurement: 10 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = custom-default)

# Run progress: 99.99% complete, ETA 00:00:00
# Fork: 1 of 2
# Warmup Iteration   1: 5.047 ms/op
# Warmup Iteration   2: 2.815 ms/op
# Warmup Iteration   3: 2.770 ms/op
# Warmup Iteration   4: 2.503 ms/op
# Warmup Iteration   5: 2.702 ms/op
Iteration   1: 1.827 ms/op
Iteration   2: 1.516 ms/op
Iteration   3: 1.603 ms/op
Iteration   4: 1.477 ms/op
Iteration   5: 1.206 ms/op
Iteration   6: 1.205 ms/op
Iteration   7: 1.456 ms/op
Iteration   8: 1.322 ms/op
Iteration   9: 1.336 ms/op
Iteration  10: 1.528 ms/op

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 2 of 2
# Warmup Iteration   1: 4.798 ms/op
# Warmup Iteration   2: 2.727 ms/op
# Warmup Iteration   3: 2.681 ms/op
# Warmup Iteration   4: 2.590 ms/op
# Warmup Iteration   5: 2.159 ms/op
Iteration   1: 1.527 ms/op
Iteration   2: 1.770 ms/op
Iteration   3: 1.481 ms/op
Iteration   4: 1.311 ms/op
Iteration   5: 1.203 ms/op
Iteration   6: 1.208 ms/op
Iteration   7: 1.264 ms/op
Iteration   8: 1.227 ms/op
Iteration   9: 1.181 ms/op
Iteration  10: 1.314 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  N = 20
  mean =      1.398 ±(99.9%) 0.166 ms/op

  Histogram, ms/op:
    [1.100, 1.150) = 0
    [1.150, 1.200) = 1
    [1.200, 1.250) = 5
    [1.250, 1.300) = 1
    [1.300, 1.350) = 4
    [1.350, 1.400) = 0
    [1.400, 1.450) = 0
    [1.450, 1.500) = 3
    [1.500, 1.550) = 3
    [1.550, 1.600) = 0
    [1.600, 1.650) = 1
    [1.650, 1.700) = 0
    [1.700, 1.750) = 0
    [1.750, 1.800) = 1
    [1.800, 1.850) = 1

  Percentiles, ms/op:
      p(0.0000) =      1.181 ms/op
     p(50.0000) =      1.329 ms/op
     p(90.0000) =      1.753 ms/op
     p(95.0000) =      1.824 ms/op
     p(99.0000) =      1.827 ms/op
     p(99.9000) =      1.827 ms/op
     p(99.9900) =      1.827 ms/op
     p(99.9990) =      1.827 ms/op
     p(99.9999) =      1.827 ms/op
    p(100.0000) =      1.827 ms/op


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, single-shot each, 10000 calls per op
# Measurement: 10 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = custom-capacity)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 2
# Warmup Iteration   1: 5.276 ms/op
# Warmup Iteration   2: 2.878 ms/op
# Warmup Iteration   3: 3.327 ms/op
# Warmup Iteration   4: 2.762 ms/op
# Warmup Iteration   5: 1.532 ms/op
Iteration   1: 1.599 ms/op
Iteration   2: 1.673 ms/op
Iteration   3: 1.387 ms/op
Iteration   4: 1.395 ms/op
Iteration   5: 1.283 ms/op
Iteration   6: 1.258 ms/op
Iteration   7: 1.240 ms/op
Iteration   8: 1.407 ms/op
Iteration   9: 1.557 ms/op
Iteration  10: 3.728 ms/op

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 2 of 2
# Warmup Iteration   1: 7.707 ms/op
# Warmup Iteration   2: 3.304 ms/op
# Warmup Iteration   3: 3.140 ms/op
# Warmup Iteration   4: 2.867 ms/op
# Warmup Iteration   5: 2.674 ms/op
Iteration   1: 1.814 ms/op
Iteration   2: 2.057 ms/op
Iteration   3: 1.534 ms/op
Iteration   4: 1.429 ms/op
Iteration   5: 1.380 ms/op
Iteration   6: 1.394 ms/op
Iteration   7: 1.370 ms/op
Iteration   8: 1.353 ms/op
Iteration   9: 1.830 ms/op
Iteration  10: 3.536 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  N = 20
  mean =      1.711 ±(99.9%) 0.599 ms/op

  Histogram, ms/op:
    [1.000, 1.250) = 1
    [1.250, 1.500) = 10
    [1.500, 1.750) = 4
    [1.750, 2.000) = 2
    [2.000, 2.250) = 1
    [2.250, 2.500) = 0
    [2.500, 2.750) = 0
    [2.750, 3.000) = 0
    [3.000, 3.250) = 0
    [3.250, 3.500) = 0
    [3.500, 3.750) = 2

  Percentiles, ms/op:
      p(0.0000) =      1.240 ms/op
     p(50.0000) =      1.418 ms/op
     p(90.0000) =      3.388 ms/op
     p(95.0000) =      3.718 ms/op
     p(99.0000) =      3.728 ms/op
     p(99.9000) =      3.728 ms/op
     p(99.9900) =      3.728 ms/op
     p(99.9990) =      3.728 ms/op
     p(99.9999) =      3.728 ms/op
    p(100.0000) =      3.728 ms/op


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, single-shot each, 10000 calls per op
# Measurement: 10 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = custom-terrible-hash)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 2
# Warmup Iteration   1: 192.703 ms/op
# Warmup Iteration   2: 174.469 ms/op
# Warmup Iteration   3: 172.572 ms/op
# Warmup Iteration   4: 173.974 ms/op
# Warmup Iteration   5: 173.381 ms/op
Iteration   1: 202.550 ms/op
Iteration   2: 167.629 ms/op
Iteration   3: 177.016 ms/op
Iteration   4: 169.537 ms/op
Iteration   5: 171.039 ms/op
Iteration   6: 171.104 ms/op
Iteration   7: 182.973 ms/op
Iteration   8: 185.572 ms/op
Iteration   9: 168.171 ms/op
Iteration  10: 167.323 ms/op

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 2 of 2
# Warmup Iteration   1: 181.762 ms/op
# Warmup Iteration   2: 161.617 ms/op
# Warmup Iteration   3: 175.657 ms/op
# Warmup Iteration   4: 160.051 ms/op
# Warmup Iteration   5: 165.667 ms/op
Iteration   1: 159.391 ms/op
Iteration   2: 168.297 ms/op
Iteration   3: 166.365 ms/op
Iteration   4: 174.327 ms/op
Iteration   5: 171.095 ms/op
Iteration   6: 175.112 ms/op
Iteration   7: 165.117 ms/op
Iteration   8: 166.088 ms/op
Iteration   9: 173.861 ms/op
Iteration  10: 167.506 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  N = 20
  mean =    172.504 ±(99.9%) 8.087 ms/op

  Histogram, ms/op:
    [150.000, 155.000) = 0
    [155.000, 160.000) = 1
    [160.000, 165.000) = 0
    [165.000, 170.000) = 9
    [170.000, 175.000) = 5
    [175.000, 180.000) = 2
    [180.000, 185.000) = 1
    [185.000, 190.000) = 1
    [190.000, 195.000) = 0
    [195.000, 200.000) = 0
    [200.000, 205.000) = 1

  Percentiles, ms/op:
      p(0.0000) =    159.391 ms/op
     p(50.0000) =    170.288 ms/op
     p(90.0000) =    185.312 ms/op
     p(95.0000) =    201.701 ms/op
     p(99.0000) =    202.550 ms/op
     p(99.9000) =    202.550 ms/op
     p(99.9900) =    202.550 ms/op
     p(99.9990) =    202.550 ms/op
     p(99.9999) =    202.550 ms/op
    p(100.0000) =    202.550 ms/op


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, single-shot each, 10000 calls per op
# Measurement: 10 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = custom-bad-hash)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 2
# Warmup Iteration   1: 46.584 ms/op
# Warmup Iteration   2: 42.421 ms/op
# Warmup Iteration   3: 40.547 ms/op
# Warmup Iteration   4: 41.312 ms/op
# Warmup Iteration   5: 41.127 ms/op
Iteration   1: 41.949 ms/op
Iteration   2: 41.611 ms/op
Iteration   3: 40.816 ms/op
Iteration   4: 42.576 ms/op
Iteration   5: 39.354 ms/op
Iteration   6: 40.877 ms/op
Iteration   7: 41.792 ms/op
Iteration   8: 44.249 ms/op
Iteration   9: 43.231 ms/op
Iteration  10: 42.162 ms/op

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 2 of 2
# Warmup Iteration   1: 49.230 ms/op
# Warmup Iteration   2: 42.080 ms/op
# Warmup Iteration   3: 43.128 ms/op
# Warmup Iteration   4: 38.949 ms/op
# Warmup Iteration   5: 40.899 ms/op
Iteration   1: 38.919 ms/op
Iteration   2: 40.506 ms/op
Iteration   3: 42.636 ms/op
Iteration   4: 38.663 ms/op
Iteration   5: 41.076 ms/op
Iteration   6: 38.996 ms/op
Iteration   7: 40.184 ms/op
Iteration   8: 42.359 ms/op
Iteration   9: 43.095 ms/op
Iteration  10: 42.892 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  N = 20
  mean =     41.397 ±(99.9%) 1.381 ms/op

  Histogram, ms/op:
    [38.000, 38.500) = 0
    [38.500, 39.000) = 3
    [39.000, 39.500) = 1
    [39.500, 40.000) = 0
    [40.000, 40.500) = 1
    [40.500, 41.000) = 3
    [41.000, 41.500) = 1
    [41.500, 42.000) = 3
    [42.000, 42.500) = 2
    [42.500, 43.000) = 3
    [43.000, 43.500) = 2
    [43.500, 44.000) = 0
    [44.000, 44.500) = 1

  Percentiles, ms/op:
      p(0.0000) =     38.663 ms/op
     p(50.0000) =     41.702 ms/op
     p(90.0000) =     43.217 ms/op
     p(95.0000) =     44.198 ms/op
     p(99.0000) =     44.249 ms/op
     p(99.9000) =     44.249 ms/op
     p(99.9900) =     44.249 ms/op
     p(99.9990) =     44.249 ms/op
     p(99.9999) =     44.249 ms/op
    p(100.0000) =     44.249 ms/op


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, single-shot each, 10000 calls per op
# Measurement: 10 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = custom-basic-hash)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 2
# Warmup Iteration   1: 4.720 ms/op
# Warmup Iteration   2: 2.256 ms/op
# Warmup Iteration   3: 1.644 ms/op
# Warmup Iteration   4: 1.576 ms/op
# Warmup Iteration   5: 1.581 ms/op
Iteration   1: 1.484 ms/op
Iteration   2: 1.564 ms/op
Iteration   3: 1.375 ms/op
Iteration   4: 1.443 ms/op
Iteration   5: 1.497 ms/op
Iteration   6: 1.596 ms/op
Iteration   7: 1.398 ms/op
Iteration   8: 1.492 ms/op
Iteration   9: 1.489 ms/op
Iteration  10: 1.383 ms/op

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 2 of 2
# Warmup Iteration   1: 5.093 ms/op
# Warmup Iteration   2: 2.647 ms/op
# Warmup Iteration   3: 2.486 ms/op
# Warmup Iteration   4: 2.577 ms/op
# Warmup Iteration   5: 2.003 ms/op
Iteration   1: 1.683 ms/op
Iteration   2: 1.598 ms/op
Iteration   3: 1.694 ms/op
Iteration   4: 1.544 ms/op
Iteration   5: 1.520 ms/op
Iteration   6: 1.463 ms/op
Iteration   7: 1.388 ms/op
Iteration   8: 1.369 ms/op
Iteration   9: 1.412 ms/op
Iteration  10: 1.299 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  N = 20
  mean =      1.484 ±(99.9%) 0.092 ms/op

  Histogram, ms/op:
    [1.200, 1.250) = 0
    [1.250, 1.300) = 1
    [1.300, 1.350) = 0
    [1.350, 1.400) = 5
    [1.400, 1.450) = 2
    [1.450, 1.500) = 5
    [1.500, 1.550) = 2
    [1.550, 1.600) = 3
    [1.600, 1.650) = 0

  Percentiles, ms/op:
      p(0.0000) =      1.299 ms/op
     p(50.0000) =      1.486 ms/op
     p(90.0000) =      1.674 ms/op
     p(95.0000) =      1.694 ms/op
     p(99.0000) =      1.694 ms/op
     p(99.9000) =      1.694 ms/op
     p(99.9900) =      1.694 ms/op
     p(99.9990) =      1.694 ms/op
     p(99.9999) =      1.694 ms/op
    p(100.0000) =      1.694 ms/op


# JMH version: 1.37
# VM version: JDK 17.0.2, OpenJDK 64-Bit Server VM, 17.0.2+8-86
# VM invoker: /Users/alanbyrne/Library/Java/JavaVirtualMachines/openjdk-17.0.2/Contents/Home/bin/java
# VM options: -ea -Xms512m -Xmx5000m
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, single-shot each, 10000 calls per op
# Measurement: 10 iterations, single-shot each, 10000 calls per op
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put
# Parameters: (hashMapType = custom-hash-no-modulo)

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 1 of 2
# Warmup Iteration   1: 4.950 ms/op
# Warmup Iteration   2: 2.810 ms/op
# Warmup Iteration   3: 2.810 ms/op
# Warmup Iteration   4: 2.536 ms/op
# Warmup Iteration   5: 2.235 ms/op
Iteration   1: 1.675 ms/op
Iteration   2: 1.566 ms/op
Iteration   3: 1.498 ms/op
Iteration   4: 1.329 ms/op
Iteration   5: 1.217 ms/op
Iteration   6: 1.254 ms/op
Iteration   7: 1.227 ms/op
Iteration   8: 1.450 ms/op
Iteration   9: 1.204 ms/op
Iteration  10: 1.316 ms/op

# Run progress: 100.00% complete, ETA 00:00:00
# Fork: 2 of 2
# Warmup Iteration   1: 4.746 ms/op
# Warmup Iteration   2: 2.619 ms/op
# Warmup Iteration   3: 2.509 ms/op
# Warmup Iteration   4: 2.631 ms/op
# Warmup Iteration   5: 1.755 ms/op
Iteration   1: 1.513 ms/op
Iteration   2: 1.541 ms/op
Iteration   3: 1.502 ms/op
Iteration   4: 1.589 ms/op
Iteration   5: 1.477 ms/op
Iteration   6: 1.457 ms/op
Iteration   7: 1.635 ms/op
Iteration   8: 1.325 ms/op
Iteration   9: 1.199 ms/op
Iteration  10: 1.225 ms/op


Result "com.abyrne133.benchmarking.JavaHashMapBenchMarkPut.put":
  N = 20
  mean =      1.410 ±(99.9%) 0.136 ms/op

  Histogram, ms/op:
    [1.100, 1.150) = 0
    [1.150, 1.200) = 1
    [1.200, 1.250) = 4
    [1.250, 1.300) = 1
    [1.300, 1.350) = 3
    [1.350, 1.400) = 0
    [1.400, 1.450) = 1
    [1.450, 1.500) = 3
    [1.500, 1.550) = 3
    [1.550, 1.600) = 2
    [1.600, 1.650) = 1
    [1.650, 1.700) = 1

  Percentiles, ms/op:
      p(0.0000) =      1.199 ms/op
     p(50.0000) =      1.454 ms/op
     p(90.0000) =      1.630 ms/op
     p(95.0000) =      1.673 ms/op
     p(99.0000) =      1.675 ms/op
     p(99.9000) =      1.675 ms/op
     p(99.9900) =      1.675 ms/op
     p(99.9990) =      1.675 ms/op
     p(99.9999) =      1.675 ms/op
    p(100.0000) =      1.675 ms/op


# Run complete. Total time: 00:56:54

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                              (hashMapType)  Mode  Cnt     Score    Error  Units
JavaHashMapBenchMarkPut.put      default-constructor  avgt   20     3.737 ±  0.092  ms/op
JavaHashMapBenchMarkPut.put                  control  avgt   20     3.747 ±  0.097  ms/op
JavaHashMapBenchMarkPut.put                 capacity  avgt   20     3.713 ±  0.100  ms/op
JavaHashMapBenchMarkPut.put            half-capacity  avgt   20     3.777 ±  0.093  ms/op
JavaHashMapBenchMarkPut.put  capacity-no-load-factor  avgt   20     3.611 ±  0.096  ms/op
JavaHashMapBenchMarkPut.put           custom-default  avgt   20     3.636 ±  0.085  ms/op
JavaHashMapBenchMarkPut.put          custom-capacity  avgt   20     3.881 ±  0.133  ms/op
JavaHashMapBenchMarkPut.put     custom-terrible-hash  avgt   20  1299.662 ± 31.113  ms/op
JavaHashMapBenchMarkPut.put          custom-bad-hash  avgt   20   721.320 ± 19.971  ms/op
JavaHashMapBenchMarkPut.put        custom-basic-hash  avgt   20     3.642 ±  0.068  ms/op
JavaHashMapBenchMarkPut.put    custom-hash-no-modulo  avgt   20     3.611 ±  0.072  ms/op
JavaHashMapBenchMarkPut.put      default-constructor    ss   20     1.249 ±  0.209  ms/op
JavaHashMapBenchMarkPut.put                  control    ss   20     1.230 ±  0.147  ms/op
JavaHashMapBenchMarkPut.put                 capacity    ss   20     0.837 ±  0.081  ms/op
JavaHashMapBenchMarkPut.put            half-capacity    ss   20     1.179 ±  0.111  ms/op
JavaHashMapBenchMarkPut.put  capacity-no-load-factor    ss   20     0.845 ±  0.120  ms/op
JavaHashMapBenchMarkPut.put           custom-default    ss   20     1.398 ±  0.166  ms/op
JavaHashMapBenchMarkPut.put          custom-capacity    ss   20     1.711 ±  0.599  ms/op
JavaHashMapBenchMarkPut.put     custom-terrible-hash    ss   20   172.504 ±  8.087  ms/op
JavaHashMapBenchMarkPut.put          custom-bad-hash    ss   20    41.397 ±  1.381  ms/op
JavaHashMapBenchMarkPut.put        custom-basic-hash    ss   20     1.484 ±  0.092  ms/op
JavaHashMapBenchMarkPut.put    custom-hash-no-modulo    ss   20     1.410 ±  0.136  ms/op
